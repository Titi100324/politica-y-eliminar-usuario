import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:url_launcher/url_launcher_string.dart';

class ProfileScreen extends StatefulWidget {
  const ProfileScreen({super.key});

  @override
  State<ProfileScreen> createState() => _ProfileScreenState();
}

class _ProfileScreenState extends State<ProfileScreen> {
  final _supabase = Supabase.instance.client;
  List<Map<String, dynamic>> _tramitesSeleccionados = [];
  List<Map<String, dynamic>> _citas = [];
  bool _loading = true;
  Map<String, dynamic>? _userData;
  String? _errorMessage;

  @override
  void initState() {
    super.initState();
    _loadUserData();
  }

  Future<void> _loadUserData() async {
    if (!mounted) return;

    setState(() {
      _loading = true;
      _errorMessage = null;
    });

    try {
      final userId = _supabase.auth.currentUser?.id;
      if (userId == null) {
        throw Exception('Usuario no autenticado');
      }

      final profileResponse = await _supabase
          .from('profiles')
          .select('''
            id,
            nombre,
            email,
            celular,
            whatsapp
          ''')
          .eq('id', userId)
          .maybeSingle();

      final tramitesResponse = await _supabase
          .from('tramites_seleccionados')
          .select('''
            id, 
            estado, 
            fecha_seleccion,
            tramites: tramite_id (id, nombre, descripcion)
          ''')
          .eq('usuario_id', userId);

      final citasResponse = await _supabase
          .from('appointments')
          .select('''
            id,
            appointment_date,
            duration_minutes,
            status,
            notes,
            tramite_id
          ''')
          .eq('user_id', userId)
          .order('appointment_date', ascending: true);

      if (!mounted) return;

      setState(() {
        _userData = profileResponse;
        _tramitesSeleccionados = List<Map<String, dynamic>>.from(tramitesResponse);
        _citas = List<Map<String, dynamic>>.from(citasResponse);
        _loading = false;
      });
    } catch (e) {
      if (!mounted) return;
      setState(() {
        _loading = false;
        _errorMessage = 'Error al cargar datos: ${e.toString()}';
      });
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text(_errorMessage!)),
      );
    }
  }

  String _formatStatus(String status) {
    if (status.isEmpty) return 'Pendiente';
    return status[0].toUpperCase() + status.substring(1).toLowerCase();
  }

  Color _getStatusColor(String status) {
    switch (status.toLowerCase()) {
      case 'pendiente':
        return Colors.orange;
      case 'confirmado':
        return Colors.green;
      case 'cancelado':
        return Colors.red;
      case 'completado':
        return Colors.blue;
      case 'reprogramado':
        return Colors.purple;
      default:
        return Colors.grey;
    }
  }

  Widget _buildErrorView() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          const Icon(Icons.error_outline, color: Colors.red, size: 50),
          const SizedBox(height: 20),
          Text(
            _errorMessage ?? 'Error desconocido',
            style: const TextStyle(color: Colors.red, fontSize: 16),
            textAlign: TextAlign.center,
          ),
          const SizedBox(height: 20),
          ElevatedButton(
            onPressed: _loadUserData,
            child: const Text('Reintentar'),
          ),
        ],
      ),
    );
  }

  Future<void> _sendDeleteRequestEmail() async {
    final userId = _supabase.auth.currentUser?.id ?? '';
    final email = _userData?['email'] ?? '';
    final nombre = _userData?['nombre'] ?? 'Usuario';

    final emailBody = 'Hola equipo de migrapp,\n\n'
        'Solicito la eliminación de mi cuenta y todos mis datos asociados.\n\n'
        'Información del usuario:\n'
        '• Nombre: $nombre\n'
        '• Email: $email\n'
        '• ID de usuario: $userId\n\n'
        'Por favor, confirmen cuando hayan completado la eliminación.\n\n'
        'Atentamente,\n$nombre';

    final emailUrl = 'mailto:soporte@migrapp.com?'
        'subject=Solicitud de eliminación de cuenta&'
        'body=${Uri.encodeComponent(emailBody)}';

    if (await canLaunchUrlString(emailUrl)) {
      await launchUrlString(emailUrl);
    } else if (mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('No se pudo abrir el cliente de email')),
      );
    }
  }

  void _showDeleteAccountDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('¿Eliminar tu cuenta?', style: TextStyle(color: Colors.red)),
        content: const Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('Esta acción es irreversible y eliminará:'),
            SizedBox(height: 8),
            Text('• Tu perfil y datos personales'),
            Text('• Todos tus trámites seleccionados'),
            Text('• Tus citas agendadas'),
            SizedBox(height: 16),
            Text('Para continuar, envía un email a:'),
            SizedBox(height: 8),
            Text('soporte@migrapp.com', style: TextStyle(fontWeight: FontWeight.bold)),
            SizedBox(height: 8),
            Text('Con el asunto: "Eliminar cuenta"'),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Cancelar'),
          ),
          TextButton(
            onPressed: () {
              Navigator.pop(context);
              _sendDeleteRequestEmail();
            },
            child: const Text('Enviar solicitud', style: TextStyle(color: Colors.red)),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Mi Perfil'),
        backgroundColor: Colors.teal[700],
        actions: [
          IconButton(
            icon: const Icon(Icons.refresh),
            onPressed: _loadUserData,
          ),
        ],
      ),
      body: _loading
          ? const Center(child: CircularProgressIndicator())
          : _errorMessage != null
          ? _buildErrorView()
          : SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            _buildProfileSection(),
            const SizedBox(height: 24),
            _buildTramitesSection(),
            const SizedBox(height: 24),
            _buildAppointmentsSection(),
          ],
        ),
      ),
    );
  }

  Widget _buildProfileSection() {
    return Card(
      elevation: 3,
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              'Información Personal',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 16),
            ListTile(
              leading: const Icon(Icons.person),
              title: Text(_userData?['nombre'] ?? 'No especificado'),
              subtitle: const Text('Nombre'),
            ),
            ListTile(
              leading: const Icon(Icons.email),
              title: Text(_userData?['email'] ?? 'No especificado'),
              subtitle: const Text('Correo electrónico'),
            ),
            ListTile(
              leading: const Icon(Icons.phone),
              title: Text(_userData?['celular'] ?? 'No especificado'),
              subtitle: const Text('Teléfono celular'),
            ),
            ListTile(
              leading: const Icon(Icons.message),
              title: Text(_userData?['whatsapp'] ?? 'No especificado'),
              subtitle: const Text('WhatsApp'),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildTramitesSection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          'Mis Trámites',
          style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
        ),
        const SizedBox(height: 12),
        _tramitesSeleccionados.isEmpty
            ? const Card(
          child: Padding(
            padding: EdgeInsets.all(16),
            child: Text('No has seleccionado ningún trámite'),
          ),
        )
            : ListView.builder(
          shrinkWrap: true,
          physics: const NeverScrollableScrollPhysics(),
          itemCount: _tramitesSeleccionados.length,
          itemBuilder: (context, index) {
            final tramite = _tramitesSeleccionados[index];
            final tramiteInfo = tramite['tramites'] as Map<String, dynamic>?;

            return Card(
              margin: const EdgeInsets.only(bottom: 12),
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Expanded(
                          child: Text(
                            tramiteInfo?['nombre'] ?? 'Trámite no especificado',
                            style: const TextStyle(
                              fontWeight: FontWeight.bold,
                              fontSize: 16,
                            ),
                          ),
                        ),
                        Chip(
                          label: Text(
                            _formatStatus(tramite['estado']?.toString() ?? 'pendiente'),
                            style: const TextStyle(color: Colors.white),
                          ),
                          backgroundColor: _getStatusColor(tramite['estado']?.toString() ?? 'pendiente'),
                        ),
                      ],
                    ),
                    const SizedBox(height: 8),
                    if (tramiteInfo?['descripcion'] != null)
                      Padding(
                        padding: const EdgeInsets.only(bottom: 8),
                        child: Text(tramiteInfo!['descripcion']),
                      ),
                    Text(
                      'Seleccionado el: ${DateFormat('dd/MM/yyyy').format(
                        DateTime.parse(tramite['fecha_seleccion']),
                      )}',
                      style: TextStyle(color: Colors.grey[600]),
                    ),
                  ],
                ),
              ),
            );
          },
        ),
      ],
    );
  }

  Widget _buildAppointmentsSection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          'Mis Citas',
          style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
        ),
        const SizedBox(height: 12),
        _citas.isEmpty
            ? const Card(
          child: Padding(
            padding: EdgeInsets.all(16),
            child: Text('No tienes citas agendadas'),
          ),
        )
            : ListView.builder(
          shrinkWrap: true,
          physics: const NeverScrollableScrollPhysics(),
          itemCount: _citas.length,
          itemBuilder: (context, index) {
            final cita = _citas[index];
            return Card(
              margin: const EdgeInsets.only(bottom: 12),
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Text(
                          'Cita #${index + 1}',
                          style: const TextStyle(
                            fontWeight: FontWeight.bold,
                            fontSize: 16,
                          ),
                        ),
                        Chip(
                          label: Text(
                            _formatStatus(cita['status']?.toString() ?? 'pendiente'),
                            style: const TextStyle(color: Colors.white),
                          ),
                          backgroundColor: _getStatusColor(cita['status']?.toString() ?? 'pendiente'),
                        ),
                      ],
                    ),
                    const SizedBox(height: 12),
                    Text(
                      'Fecha: ${DateFormat('dd/MM/yyyy').format(
                        DateTime.parse(cita['appointment_date']),
                      )}',
                    ),
                    Text(
                      'Hora: ${DateFormat('HH:mm').format(
                        DateTime.parse(cita['appointment_date']),
                      )}',
                    ),
                    if (cita['duration_minutes'] != null)
                      Text('Duración: ${cita['duration_minutes']} minutos'),
                    if (cita['notes'] != null)
                      Padding(
                        padding: const EdgeInsets.only(top: 8),
                        child: Text(
                          'Notas: ${cita['notes']}',
                          style: TextStyle(color: Colors.grey[600]),
                        ),
                      ),
                  ],
                ),
              ),
            );
          },
        ),
        const SizedBox(height: 24),
        _buildDeleteAccountSection(),
      ],
    );
  }

  Widget _buildDeleteAccountSection() {
    return Card(
      color: Colors.red[50],
      elevation: 2,
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              'Eliminar cuenta',
              style: TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
                color: Colors.red,
              ),
            ),
            const SizedBox(height: 8),
            const Text(
              'Puedes solicitar la eliminación de tu cuenta y todos tus datos personales.',
              style: TextStyle(color: Colors.red),
            ),
            const SizedBox(height: 12),
            ElevatedButton.icon(
              icon: const Icon(Icons.delete_forever, size: 20),
              label: const Text('Solicitar eliminación de cuenta'),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.red,
                foregroundColor: Colors.white,
              ),
              onPressed: _showDeleteAccountDialog,
            ),
          ],
        ),
      ),
    );
  }
}
